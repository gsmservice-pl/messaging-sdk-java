/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package pl.gsmservice.gateway;

import org.springframework.boot.autoconfigure.AutoConfiguration;
import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;
import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;
import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
import org.springframework.boot.context.properties.EnableConfigurationProperties;
import org.springframework.context.annotation.Bean;
import java.util.concurrent.TimeUnit;

import java.lang.IllegalStateException;
import java.lang.String;
import java.lang.System;
import java.util.Optional;
import java.util.concurrent.Executors;
import java.util.concurrent.ScheduledExecutorService;
import java.util.function.Consumer;
import pl.gsmservice.gateway.utils.BackoffStrategy;
import pl.gsmservice.gateway.utils.HTTPClient;
import pl.gsmservice.gateway.utils.RetryConfig;
import pl.gsmservice.gateway.utils.SpeakeasyHTTPClient;


/**
 * Spring Boot Auto Configuration for openapi SDK
 * This configuration class automatically configures the openapi SDK
 * when Spring Boot detects it on the classpath.
 */
@AutoConfiguration
@ConditionalOnClass(Client.class)
@EnableConfigurationProperties(GatewayAutoConfigProperties.class)
public class GatewayAutoConfig {

    /**
     * Constructor.
     */
    public GatewayAutoConfig() {
    }

    /**
     * Creates a RetryConfig bean from properties if retry is enabled.
     * 
     * @param properties the configuration properties
     * @return A configured RetryConfig instance
     */
    @Bean
    @ConditionalOnMissingBean
    @ConditionalOnProperty(prefix = "gateway.retry-config", name = "strategy")
    public RetryConfig retryConfig(GatewayAutoConfigProperties properties) {
        GatewayAutoConfigProperties.RetryConfig retryProps = properties.getRetryConfig();
        
        if (RetryConfig.Strategy.BACKOFF.equals(retryProps.getStrategy())) {
            GatewayAutoConfigProperties.RetryConfig.Backoff backoff = retryProps.getBackoff();
            return RetryConfig.builder()
                .backoff(
                    BackoffStrategy.builder()
                        .initialInterval(backoff.getInitialInterval().toMillis(), TimeUnit.MILLISECONDS)
                        .maxInterval(backoff.getMaxInterval().toMillis(), TimeUnit.MILLISECONDS)
                        .maxElapsedTime(backoff.getMaxElapsedTime().toMillis(), TimeUnit.MILLISECONDS)
                        .baseFactor(backoff.getBaseFactor())
                        .jitterFactor(backoff.getJitterFactor())
                        .retryConnectError(backoff.isRetryConnectError())
                        .retryReadTimeoutError(backoff.isRetryReadTimeoutError())
                        .build()
                )
                .build();
        }
        
        // Default retry config for other strategies
        return RetryConfig.builder().build();
    }

    /**
     * Creates a {@code Consumer<String>} bean for HTTP debug logging if none exists.
     * This logger is used by the SpeakeasyHTTPClient for debug output when debug logging is enabled.
     * By default, it logs to {@code System.out}, but can be customized by providing your own {@code Consumer<String>} bean.
     *
     * @return A {@code Consumer<String>} that logs messages to {@code System.out}
     */
    @Bean
    @ConditionalOnMissingBean
    public Consumer<String> httpLogger() {
        return System.out::println;
    }

    /**
     * Creates an HTTPClient bean if none exists.
     *
     * @param properties the configuration properties
     * @param httpLogger the logger for HTTP debug output
     * @return A configured HTTPClient instance
     */
    @Bean
    @ConditionalOnMissingBean
    public HTTPClient httpClient(GatewayAutoConfigProperties properties, Consumer<String> httpLogger) {
        GatewayAutoConfigProperties.HttpClient httpClientProps = properties.getHttpClient();

        // Configure the static logger
        SpeakeasyHTTPClient.setLogger(httpLogger);

        if (httpClientProps != null) {
            // Configure debug logging
            SpeakeasyHTTPClient.setDebugLogging(httpClientProps.isEnableDebugLogging());

            // Configure redacted headers
            if (httpClientProps.getRedactedHeaders() != null && !httpClientProps.getRedactedHeaders().isEmpty()) {
                SpeakeasyHTTPClient.setRedactedHeaders(httpClientProps.getRedactedHeaders());
            }
        }

        return new SpeakeasyHTTPClient();
    }
    /**
     * Creates a SecuritySource bean if none exists and security properties are configured.
     *
     * @param properties the configuration properties
     * @return A configured SecuritySource instance
     */
    @Bean
    @ConditionalOnMissingBean
    @ConditionalOnPropertyPrefix(prefix = "gateway.security")
    public SecuritySource securitySource(GatewayAutoConfigProperties properties) {GatewayAutoConfigProperties.Security securityProps = properties.getSecurity();
        pl.gsmservice.gateway.models.components.Security.Builder securityBuilder = pl.gsmservice.gateway.models.components.Security.builder();
        boolean hasAnySecurityConfiguration = false;
        // Build Bearer security from direct properties (primitive value)
        if (securityProps.getBearer() != null) {
            securityBuilder.bearer(securityProps.getBearer());
            hasAnySecurityConfiguration = true;
        }
        
        if (!hasAnySecurityConfiguration) {
            throw new IllegalStateException("Security configuration is present but no security options are configured. " +
                "Please configure at least one security option in your application properties.");
        }
        
        return SecuritySource.of(securityBuilder.build());
    }

    /**
     * Creates the SDKConfiguration bean as the single source of truth for all SDK configuration.
     *
     * @param properties the configuration properties
     * @param httpClient the HTTP client bean
     * @param hooks the hooks bean
     * @param asyncHooks the async hooks bean
     * @param securitySource the security source bean (optional)
     * @param retryConfig the retry config bean (optional)
     * @return A configured SDKConfiguration instance
     */
    @Bean
    @ConditionalOnMissingBean
    public SDKConfiguration sdkConfiguration(
            GatewayAutoConfigProperties properties,
            HTTPClient httpClient,
            pl.gsmservice.gateway.utils.Hooks hooks,
            pl.gsmservice.gateway.utils.AsyncHooks asyncHooks,
            SecuritySource securitySource,
            Optional<RetryConfig> retryConfig) {
        
        SDKConfiguration sdkConfiguration = new SDKConfiguration();
        
        sdkConfiguration.setClient(httpClient);
        
        sdkConfiguration.setHooks(hooks);
        sdkConfiguration.setAsyncHooks(asyncHooks);
        sdkConfiguration.setSecuritySource(securitySource);
        
        if (properties.getServerUrl() != null) {
            sdkConfiguration.setServerUrl(properties.getServerUrl());
        }
        if (properties.getServer() != null) {
            sdkConfiguration.setServer(properties.getServer());
        }
        
        sdkConfiguration.setRetryConfig(retryConfig);
        
        return sdkConfiguration;
    }

    /**
     * Creates the main SDK bean using the configured SDKConfiguration.
     *
     * @param sdkConfiguration the configured SDKConfiguration bean
     * @return A configured Client instance
     */
    @Bean
    @ConditionalOnMissingBean
    public Client client(SDKConfiguration sdkConfiguration) {
        return new Client(sdkConfiguration);
    }

    /**
     * Creates an AsyncHooks bean if none exists.
     * 
     * @return A configured AsyncHooks instance
     */
    @Bean
    @ConditionalOnMissingBean
    public pl.gsmservice.gateway.utils.AsyncHooks asyncHooks() {
        return new pl.gsmservice.gateway.utils.AsyncHooks();
    }

    /**
     * Creates a ScheduledExecutorService for async retry operations if none exists.
     * 
     * @return A configured ScheduledExecutorService instance
     */
    @Bean
    @ConditionalOnMissingBean
    public ScheduledExecutorService retryScheduler() {
        return Executors.newSingleThreadScheduledExecutor();
    }

    /**
     * Creates a Hooks configuration bean if none exists.
     *
     * @return A configured Hooks instance
     */
    @Bean
    @ConditionalOnMissingBean
    public pl.gsmservice.gateway.utils.Hooks hooks() {
        return new pl.gsmservice.gateway.utils.Hooks();
    }
    /**
     * Creates a Accounts sub-SDK bean if none exists.
     *
     * @param client the main SDK instance
     * @return A configured Accounts instance
     */
    @Bean
    @ConditionalOnMissingBean
    public Accounts accounts(Client client) {
        return client.accounts();
    }
    /**
     * Creates a Outgoing sub-SDK bean if none exists.
     *
     * @param client the main SDK instance
     * @return A configured Outgoing instance
     */
    @Bean
    @ConditionalOnMissingBean
    public Outgoing outgoing(Client client) {
        return client.outgoing();
    }
    /**
     * Creates a Incoming sub-SDK bean if none exists.
     *
     * @param client the main SDK instance
     * @return A configured Incoming instance
     */
    @Bean
    @ConditionalOnMissingBean
    public Incoming incoming(Client client) {
        return client.incoming();
    }
    /**
     * Creates a Common sub-SDK bean if none exists.
     *
     * @param client the main SDK instance
     * @return A configured Common instance
     */
    @Bean
    @ConditionalOnMissingBean
    public Common common(Client client) {
        return client.common();
    }
    /**
     * Creates a Senders sub-SDK bean if none exists.
     *
     * @param client the main SDK instance
     * @return A configured Senders instance
     */
    @Bean
    @ConditionalOnMissingBean
    public Senders senders(Client client) {
        return client.senders();
    }

    /**
     * Creates the async SDK bean if none exists.
     *
     * @param client the main SDK instance
     * @param sdkConfiguration the configured SDKConfiguration bean
     * @return A configured AsyncClient instance
     */
    @Bean
    @ConditionalOnMissingBean
    public AsyncClient asyncClient(Client client, SDKConfiguration sdkConfiguration) {
        return new AsyncClient(client, sdkConfiguration);
    }
    /**
     * Creates an AsyncAccounts sub-SDK bean if none exists.
     *
     * @param asyncClient the async SDK instance
     * @return A configured AsyncAccounts instance
     */
    @Bean
    @ConditionalOnMissingBean
    public AsyncAccounts asyncAccounts(AsyncClient asyncClient) {
        return asyncClient.accounts();
    }
    /**
     * Creates an AsyncOutgoing sub-SDK bean if none exists.
     *
     * @param asyncClient the async SDK instance
     * @return A configured AsyncOutgoing instance
     */
    @Bean
    @ConditionalOnMissingBean
    public AsyncOutgoing asyncOutgoing(AsyncClient asyncClient) {
        return asyncClient.outgoing();
    }
    /**
     * Creates an AsyncIncoming sub-SDK bean if none exists.
     *
     * @param asyncClient the async SDK instance
     * @return A configured AsyncIncoming instance
     */
    @Bean
    @ConditionalOnMissingBean
    public AsyncIncoming asyncIncoming(AsyncClient asyncClient) {
        return asyncClient.incoming();
    }
    /**
     * Creates an AsyncCommon sub-SDK bean if none exists.
     *
     * @param asyncClient the async SDK instance
     * @return A configured AsyncCommon instance
     */
    @Bean
    @ConditionalOnMissingBean
    public AsyncCommon asyncCommon(AsyncClient asyncClient) {
        return asyncClient.common();
    }
    /**
     * Creates an AsyncSenders sub-SDK bean if none exists.
     *
     * @param asyncClient the async SDK instance
     * @return A configured AsyncSenders instance
     */
    @Bean
    @ConditionalOnMissingBean
    public AsyncSenders asyncSenders(AsyncClient asyncClient) {
        return asyncClient.senders();
    }
}