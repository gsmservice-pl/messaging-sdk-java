/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package pl.gsmservice.gateway;

import com.fasterxml.jackson.core.type.TypeReference;
import java.io.InputStream;
import java.lang.Exception;
import java.lang.Object;
import java.lang.String;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Optional;
import java.util.concurrent.TimeUnit;
import pl.gsmservice.gateway.models.components.Sender;
import pl.gsmservice.gateway.models.components.SenderInput;
import pl.gsmservice.gateway.models.errors.ErrorResponse;
import pl.gsmservice.gateway.models.errors.SDKError;
import pl.gsmservice.gateway.models.operations.AddSenderRequestBuilder;
import pl.gsmservice.gateway.models.operations.AddSenderResponse;
import pl.gsmservice.gateway.models.operations.DeleteSenderRequest;
import pl.gsmservice.gateway.models.operations.DeleteSenderRequestBuilder;
import pl.gsmservice.gateway.models.operations.DeleteSenderResponse;
import pl.gsmservice.gateway.models.operations.ListSendersRequestBuilder;
import pl.gsmservice.gateway.models.operations.ListSendersResponse;
import pl.gsmservice.gateway.models.operations.SDKMethodInterfaces.*;
import pl.gsmservice.gateway.models.operations.SetDefaultSenderRequest;
import pl.gsmservice.gateway.models.operations.SetDefaultSenderRequestBuilder;
import pl.gsmservice.gateway.models.operations.SetDefaultSenderResponse;
import pl.gsmservice.gateway.utils.BackoffStrategy;
import pl.gsmservice.gateway.utils.HTTPClient;
import pl.gsmservice.gateway.utils.HTTPRequest;
import pl.gsmservice.gateway.utils.Hook.AfterErrorContextImpl;
import pl.gsmservice.gateway.utils.Hook.AfterSuccessContextImpl;
import pl.gsmservice.gateway.utils.Hook.BeforeRequestContextImpl;
import pl.gsmservice.gateway.utils.Options;
import pl.gsmservice.gateway.utils.Retries.NonRetryableException;
import pl.gsmservice.gateway.utils.Retries;
import pl.gsmservice.gateway.utils.RetryConfig;
import pl.gsmservice.gateway.utils.SerializedBody;
import pl.gsmservice.gateway.utils.Utils.JsonShape;
import pl.gsmservice.gateway.utils.Utils; 

public class Senders implements
            MethodCallListSenders,
            MethodCallAddSender,
            MethodCallDeleteSender,
            MethodCallSetDefaultSender {

    private final SDKConfiguration sdkConfiguration;

    Senders(SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
    }


    /**
     * List allowed senders names
     * 
 * <br>
 * <br>Get a list of allowed senders defined in your account. The method doesn't take any parameters. Please use builder style:
 * <br>
     * <pre><code>
     * ListSendersResponse res = sdk.senders().list()
     *    .call();
     * </code></pre>
     * 
 * <br>As a successful result a <code>ListSendersResponse</code> object will be returned wich <code>senders</code> property of type <code>List&lt;Sender&gt;</code> containing <code>Sender</code> objects, each object per single sender.
     * @return The call builder
     */
    public ListSendersRequestBuilder list() {
        return new ListSendersRequestBuilder(this);
    }

    /**
     * List allowed senders names
     * 
 * <br>
 * <br>Get a list of allowed senders defined in your account. The method doesn't take any parameters. Please use builder style:
 * <br>
     * <pre><code>
     * ListSendersResponse res = sdk.senders().list()
     *    .call();
     * </code></pre>
     * 
 * <br>As a successful result a <code>ListSendersResponse</code> object will be returned wich <code>senders</code> property of type <code>List&lt;Sender&gt;</code> containing <code>Sender</code> objects, each object per single sender.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public ListSendersResponse listDirect() throws Exception {
        return list(Optional.empty());
    }
    
    /**
     * List allowed senders names
     * 
 * <br>
 * <br>Get a list of allowed senders defined in your account. The method doesn't take any parameters. Please use builder style:
 * <br>
     * <pre><code>
     * ListSendersResponse res = sdk.senders().list()
     *    .call();
     * </code></pre>
     * 
 * <br>As a successful result a <code>ListSendersResponse</code> object will be returned wich <code>senders</code> property of type <code>List&lt;Sender&gt;</code> containing <code>Sender</code> objects, each object per single sender.
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public ListSendersResponse list(
            Optional<Options> options) throws Exception {

        if (options.isPresent()) {
          options.get().validate(Arrays.asList(Options.Option.RETRY_CONFIG));
        }
        String _baseUrl = this.sdkConfiguration.serverUrl;
        String _url = Utils.generateURL(
                _baseUrl,
                "/senders");
        
        HTTPRequest _req = new HTTPRequest(_url, "GET");
        _req.addHeader("Accept", "application/json")
            .addHeader("user-agent", 
                SDKConfiguration.USER_AGENT);

        Utils.configureSecurity(_req,  
                this.sdkConfiguration.securitySource.getSecurity());

        HTTPClient _client = this.sdkConfiguration.defaultClient;
        HTTPRequest _finalReq = _req;
        RetryConfig _retryConfig;
        if (options.isPresent() && options.get().retryConfig().isPresent()) {
            _retryConfig = options.get().retryConfig().get();
        } else if (this.sdkConfiguration.retryConfig.isPresent()) {
            _retryConfig = this.sdkConfiguration.retryConfig.get();
        } else {
            _retryConfig = RetryConfig.builder()
                .backoff(BackoffStrategy.builder()
                            .initialInterval(500, TimeUnit.MILLISECONDS)
                            .maxInterval(60000, TimeUnit.MILLISECONDS)
                            .baseFactor((double)(1.5))
                            .maxElapsedTime(3600000, TimeUnit.MILLISECONDS)
                            .retryConnectError(true)
                            .build())
                .build();
        }
        List<String> _statusCodes = new ArrayList<>();
        _statusCodes.add("5XX");
        Retries _retries = Retries.builder()
            .action(() -> {
                HttpRequest _r = null;
                try {
                    _r = sdkConfiguration.hooks()
                        .beforeRequest(
                            new BeforeRequestContextImpl(
                                "listSenders", 
                                Optional.of(List.of()), 
                                sdkConfiguration.securitySource()),
                            _finalReq.build());
                } catch (Exception _e) {
                    throw new NonRetryableException(_e);
                }
                try {
                    return _client.send(_r);
                } catch (Exception _e) {
                    return sdkConfiguration.hooks()
                        .afterError(
                            new AfterErrorContextImpl(
                                "listSenders",
                                 Optional.of(List.of()),
                                 sdkConfiguration.securitySource()), 
                            Optional.empty(),
                            Optional.of(_e));
                }
            })
            .retryConfig(_retryConfig)
            .statusCodes(_statusCodes)
            .build();
        HttpResponse<InputStream> _httpRes = sdkConfiguration.hooks()
                 .afterSuccess(
                     new AfterSuccessContextImpl(
                         "listSenders", 
                         Optional.of(List.of()), 
                         sdkConfiguration.securitySource()),
                     _retries.run());
        String _contentType = _httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        ListSendersResponse.Builder _resBuilder = 
            ListSendersResponse
                .builder()
                .contentType(_contentType)
                .statusCode(_httpRes.statusCode())
                .rawResponse(_httpRes);

        ListSendersResponse _res = _resBuilder.build();
        
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "200")) {
            if (Utils.contentTypeMatches(_contentType, "application/json")) {
                List<Sender> _out = Utils.mapper().readValue(
                    Utils.toUtf8AndClose(_httpRes.body()),
                    new TypeReference<List<Sender>>() {});
                _res.withSenders(Optional.ofNullable(_out));
                return _res;
            } else {
                throw new SDKError(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "Unexpected content-type received: " + _contentType, 
                    Utils.extractByteArrayFromBody(_httpRes));
            }
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "400", "401", "403", "4XX", "5XX")) {
            if (Utils.contentTypeMatches(_contentType, "application/problem+json")) {
                ErrorResponse _out = Utils.mapper().readValue(
                    Utils.toUtf8AndClose(_httpRes.body()),
                    new TypeReference<ErrorResponse>() {});
                throw _out;
            } else {
                throw new SDKError(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "Unexpected content-type received: " + _contentType, 
                    Utils.extractByteArrayFromBody(_httpRes));
            }
        }
        throw new SDKError(
            _httpRes, 
            _httpRes.statusCode(), 
            "Unexpected status code received: " + _httpRes.statusCode(), 
            Utils.extractByteArrayFromBody(_httpRes));
    }



    /**
     * Add a new sender name
     * 
 * <br>
 * <br>Define a new allowed sender on your account. You should pass as parameter a <code>SenderInput</code> object with two properties: <code>sender</code> (defines sender name) and <code>description</code>. Please use builder style:
 * <br>
     * <pre><code>
     * AddSenderResponse res = sdk.senders().add()
     *    .request(req)
     *    .call();
     * </code></pre>
     * 
 * <br>Please carefully fill this property with the extensive description of a sender name (what will be its use, what the name mean, etc). 
 * <br>
 * <br>As a successful result a <code>AddSenderResponse</code> object will be returned with a <code>sender</code> property containing a <code>Sender</code> object with details and status of added sender name.
     * @return The call builder
     */
    public AddSenderRequestBuilder add() {
        return new AddSenderRequestBuilder(this);
    }

    /**
     * Add a new sender name
     * 
 * <br>
 * <br>Define a new allowed sender on your account. You should pass as parameter a <code>SenderInput</code> object with two properties: <code>sender</code> (defines sender name) and <code>description</code>. Please use builder style:
 * <br>
     * <pre><code>
     * AddSenderResponse res = sdk.senders().add()
     *    .request(req)
     *    .call();
     * </code></pre>
     * 
 * <br>Please carefully fill this property with the extensive description of a sender name (what will be its use, what the name mean, etc). 
 * <br>
 * <br>As a successful result a <code>AddSenderResponse</code> object will be returned with a <code>sender</code> property containing a <code>Sender</code> object with details and status of added sender name.
     * @param request The request object containing all of the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public AddSenderResponse add(
            SenderInput request) throws Exception {
        return add(request, Optional.empty());
    }
    
    /**
     * Add a new sender name
     * 
 * <br>
 * <br>Define a new allowed sender on your account. You should pass as parameter a <code>SenderInput</code> object with two properties: <code>sender</code> (defines sender name) and <code>description</code>. Please use builder style:
 * <br>
     * <pre><code>
     * AddSenderResponse res = sdk.senders().add()
     *    .request(req)
     *    .call();
     * </code></pre>
     * 
 * <br>Please carefully fill this property with the extensive description of a sender name (what will be its use, what the name mean, etc). 
 * <br>
 * <br>As a successful result a <code>AddSenderResponse</code> object will be returned with a <code>sender</code> property containing a <code>Sender</code> object with details and status of added sender name.
     * @param request The request object containing all of the parameters for the API call.
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public AddSenderResponse add(
            SenderInput request,
            Optional<Options> options) throws Exception {

        if (options.isPresent()) {
          options.get().validate(Arrays.asList(Options.Option.RETRY_CONFIG));
        }
        String _baseUrl = this.sdkConfiguration.serverUrl;
        String _url = Utils.generateURL(
                _baseUrl,
                "/senders");
        
        HTTPRequest _req = new HTTPRequest(_url, "POST");
        Object _convertedRequest = Utils.convertToShape(
                request, 
                JsonShape.DEFAULT,
                new TypeReference<SenderInput>() {});
        SerializedBody _serializedRequestBody = Utils.serializeRequestBody(
                _convertedRequest, 
                "request",
                "json",
                false);
        if (_serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        _req.setBody(Optional.ofNullable(_serializedRequestBody));
        _req.addHeader("Accept", "application/json")
            .addHeader("user-agent", 
                SDKConfiguration.USER_AGENT);

        Utils.configureSecurity(_req,  
                this.sdkConfiguration.securitySource.getSecurity());

        HTTPClient _client = this.sdkConfiguration.defaultClient;
        HTTPRequest _finalReq = _req;
        RetryConfig _retryConfig;
        if (options.isPresent() && options.get().retryConfig().isPresent()) {
            _retryConfig = options.get().retryConfig().get();
        } else if (this.sdkConfiguration.retryConfig.isPresent()) {
            _retryConfig = this.sdkConfiguration.retryConfig.get();
        } else {
            _retryConfig = RetryConfig.builder()
                .backoff(BackoffStrategy.builder()
                            .initialInterval(500, TimeUnit.MILLISECONDS)
                            .maxInterval(60000, TimeUnit.MILLISECONDS)
                            .baseFactor((double)(1.5))
                            .maxElapsedTime(3600000, TimeUnit.MILLISECONDS)
                            .retryConnectError(true)
                            .build())
                .build();
        }
        List<String> _statusCodes = new ArrayList<>();
        _statusCodes.add("5XX");
        Retries _retries = Retries.builder()
            .action(() -> {
                HttpRequest _r = null;
                try {
                    _r = sdkConfiguration.hooks()
                        .beforeRequest(
                            new BeforeRequestContextImpl(
                                "addSender", 
                                Optional.of(List.of()), 
                                sdkConfiguration.securitySource()),
                            _finalReq.build());
                } catch (Exception _e) {
                    throw new NonRetryableException(_e);
                }
                try {
                    return _client.send(_r);
                } catch (Exception _e) {
                    return sdkConfiguration.hooks()
                        .afterError(
                            new AfterErrorContextImpl(
                                "addSender",
                                 Optional.of(List.of()),
                                 sdkConfiguration.securitySource()), 
                            Optional.empty(),
                            Optional.of(_e));
                }
            })
            .retryConfig(_retryConfig)
            .statusCodes(_statusCodes)
            .build();
        HttpResponse<InputStream> _httpRes = sdkConfiguration.hooks()
                 .afterSuccess(
                     new AfterSuccessContextImpl(
                         "addSender", 
                         Optional.of(List.of()), 
                         sdkConfiguration.securitySource()),
                     _retries.run());
        String _contentType = _httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        AddSenderResponse.Builder _resBuilder = 
            AddSenderResponse
                .builder()
                .contentType(_contentType)
                .statusCode(_httpRes.statusCode())
                .rawResponse(_httpRes);

        AddSenderResponse _res = _resBuilder.build();
        
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "201")) {
            _res.withHeaders(_httpRes.headers().map());
            if (Utils.contentTypeMatches(_contentType, "application/json")) {
                Sender _out = Utils.mapper().readValue(
                    Utils.toUtf8AndClose(_httpRes.body()),
                    new TypeReference<Sender>() {});
                _res.withSender(Optional.ofNullable(_out));
                return _res;
            } else {
                throw new SDKError(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "Unexpected content-type received: " + _contentType, 
                    Utils.extractByteArrayFromBody(_httpRes));
            }
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "400", "401", "403", "4XX", "5XX")) {
            if (Utils.contentTypeMatches(_contentType, "application/problem+json")) {
                ErrorResponse _out = Utils.mapper().readValue(
                    Utils.toUtf8AndClose(_httpRes.body()),
                    new TypeReference<ErrorResponse>() {});
                throw _out;
            } else {
                throw new SDKError(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "Unexpected content-type received: " + _contentType, 
                    Utils.extractByteArrayFromBody(_httpRes));
            }
        }
        throw new SDKError(
            _httpRes, 
            _httpRes.statusCode(), 
            "Unexpected status code received: " + _httpRes.statusCode(), 
            Utils.extractByteArrayFromBody(_httpRes));
    }



    /**
     * Delete a sender name
     * 
 * <br>
 * <br>Removes defined sender name from your account. This method accepts a <code>string</code> with a <strong>sender name</strong> you want to remove. Please use builder style:
 * <br>
     * <pre><code>
     * DeleteSenderResponse res = sdk.senders().delete()
     *    .sender("Podpis")
     *    .call();
     * </code></pre>
     * 
 * <br>Sender name will be deleted immediately.
 * <br>
 * <br>As a successful response a <code>DeleteSenderResponse</code> object will de returned with <code>statusCode</code> property of <code>204</code>.
     * @return The call builder
     */
    public DeleteSenderRequestBuilder delete() {
        return new DeleteSenderRequestBuilder(this);
    }

    /**
     * Delete a sender name
     * 
 * <br>
 * <br>Removes defined sender name from your account. This method accepts a <code>string</code> with a <strong>sender name</strong> you want to remove. Please use builder style:
 * <br>
     * <pre><code>
     * DeleteSenderResponse res = sdk.senders().delete()
     *    .sender("Podpis")
     *    .call();
     * </code></pre>
     * 
 * <br>Sender name will be deleted immediately.
 * <br>
 * <br>As a successful response a <code>DeleteSenderResponse</code> object will de returned with <code>statusCode</code> property of <code>204</code>.
     * @param sender Sender name to be removed
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public DeleteSenderResponse delete(
            String sender) throws Exception {
        return delete(sender, Optional.empty());
    }
    
    /**
     * Delete a sender name
     * 
 * <br>
 * <br>Removes defined sender name from your account. This method accepts a <code>string</code> with a <strong>sender name</strong> you want to remove. Please use builder style:
 * <br>
     * <pre><code>
     * DeleteSenderResponse res = sdk.senders().delete()
     *    .sender("Podpis")
     *    .call();
     * </code></pre>
     * 
 * <br>Sender name will be deleted immediately.
 * <br>
 * <br>As a successful response a <code>DeleteSenderResponse</code> object will de returned with <code>statusCode</code> property of <code>204</code>.
     * @param sender Sender name to be removed
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public DeleteSenderResponse delete(
            String sender,
            Optional<Options> options) throws Exception {

        if (options.isPresent()) {
          options.get().validate(Arrays.asList(Options.Option.RETRY_CONFIG));
        }
        DeleteSenderRequest request =
            DeleteSenderRequest
                .builder()
                .sender(sender)
                .build();
        
        String _baseUrl = this.sdkConfiguration.serverUrl;
        String _url = Utils.generateURL(
                DeleteSenderRequest.class,
                _baseUrl,
                "/senders/{sender}",
                request, null);
        
        HTTPRequest _req = new HTTPRequest(_url, "DELETE");
        _req.addHeader("Accept", "application/problem+json")
            .addHeader("user-agent", 
                SDKConfiguration.USER_AGENT);

        Utils.configureSecurity(_req,  
                this.sdkConfiguration.securitySource.getSecurity());

        HTTPClient _client = this.sdkConfiguration.defaultClient;
        HTTPRequest _finalReq = _req;
        RetryConfig _retryConfig;
        if (options.isPresent() && options.get().retryConfig().isPresent()) {
            _retryConfig = options.get().retryConfig().get();
        } else if (this.sdkConfiguration.retryConfig.isPresent()) {
            _retryConfig = this.sdkConfiguration.retryConfig.get();
        } else {
            _retryConfig = RetryConfig.builder()
                .backoff(BackoffStrategy.builder()
                            .initialInterval(500, TimeUnit.MILLISECONDS)
                            .maxInterval(60000, TimeUnit.MILLISECONDS)
                            .baseFactor((double)(1.5))
                            .maxElapsedTime(3600000, TimeUnit.MILLISECONDS)
                            .retryConnectError(true)
                            .build())
                .build();
        }
        List<String> _statusCodes = new ArrayList<>();
        _statusCodes.add("5XX");
        Retries _retries = Retries.builder()
            .action(() -> {
                HttpRequest _r = null;
                try {
                    _r = sdkConfiguration.hooks()
                        .beforeRequest(
                            new BeforeRequestContextImpl(
                                "deleteSender", 
                                Optional.of(List.of()), 
                                sdkConfiguration.securitySource()),
                            _finalReq.build());
                } catch (Exception _e) {
                    throw new NonRetryableException(_e);
                }
                try {
                    return _client.send(_r);
                } catch (Exception _e) {
                    return sdkConfiguration.hooks()
                        .afterError(
                            new AfterErrorContextImpl(
                                "deleteSender",
                                 Optional.of(List.of()),
                                 sdkConfiguration.securitySource()), 
                            Optional.empty(),
                            Optional.of(_e));
                }
            })
            .retryConfig(_retryConfig)
            .statusCodes(_statusCodes)
            .build();
        HttpResponse<InputStream> _httpRes = sdkConfiguration.hooks()
                 .afterSuccess(
                     new AfterSuccessContextImpl(
                         "deleteSender", 
                         Optional.of(List.of()), 
                         sdkConfiguration.securitySource()),
                     _retries.run());
        String _contentType = _httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        DeleteSenderResponse.Builder _resBuilder = 
            DeleteSenderResponse
                .builder()
                .contentType(_contentType)
                .statusCode(_httpRes.statusCode())
                .rawResponse(_httpRes);

        DeleteSenderResponse _res = _resBuilder.build();
        
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "204")) {
            _res.withHeaders(_httpRes.headers().map());
            // no content 
            return _res;
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "400", "401", "403", "404", "4XX", "5XX")) {
            if (Utils.contentTypeMatches(_contentType, "application/problem+json")) {
                ErrorResponse _out = Utils.mapper().readValue(
                    Utils.toUtf8AndClose(_httpRes.body()),
                    new TypeReference<ErrorResponse>() {});
                throw _out;
            } else {
                throw new SDKError(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "Unexpected content-type received: " + _contentType, 
                    Utils.extractByteArrayFromBody(_httpRes));
            }
        }
        throw new SDKError(
            _httpRes, 
            _httpRes.statusCode(), 
            "Unexpected status code received: " + _httpRes.statusCode(), 
            Utils.extractByteArrayFromBody(_httpRes));
    }



    /**
     * Set default sender name
     * 
 * <br>
 * <br>Set default sender name to one of the senders names already defined on your account. This method accepts a <code>string</code> containing a <strong>sender name</strong> to be set as default on your account. Please use a builder style:
 * <br>
     * <pre><code>
     * SetDefaultSenderResponse res = sdk.senders().setDefault()
     *    .sender("Podpis")
     *    .call();
     * </code></pre>
     * 
 * <br>As a successful response a <code>SetDefaultSenderResponse</code> will be returned with <code>statusCode</code> property of <code>204</code>.
     * @return The call builder
     */
    public SetDefaultSenderRequestBuilder setDefault() {
        return new SetDefaultSenderRequestBuilder(this);
    }

    /**
     * Set default sender name
     * 
 * <br>
 * <br>Set default sender name to one of the senders names already defined on your account. This method accepts a <code>string</code> containing a <strong>sender name</strong> to be set as default on your account. Please use a builder style:
 * <br>
     * <pre><code>
     * SetDefaultSenderResponse res = sdk.senders().setDefault()
     *    .sender("Podpis")
     *    .call();
     * </code></pre>
     * 
 * <br>As a successful response a <code>SetDefaultSenderResponse</code> will be returned with <code>statusCode</code> property of <code>204</code>.
     * @param sender Sender name to set as default
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public SetDefaultSenderResponse setDefault(
            String sender) throws Exception {
        return setDefault(sender, Optional.empty());
    }
    
    /**
     * Set default sender name
     * 
 * <br>
 * <br>Set default sender name to one of the senders names already defined on your account. This method accepts a <code>string</code> containing a <strong>sender name</strong> to be set as default on your account. Please use a builder style:
 * <br>
     * <pre><code>
     * SetDefaultSenderResponse res = sdk.senders().setDefault()
     *    .sender("Podpis")
     *    .call();
     * </code></pre>
     * 
 * <br>As a successful response a <code>SetDefaultSenderResponse</code> will be returned with <code>statusCode</code> property of <code>204</code>.
     * @param sender Sender name to set as default
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public SetDefaultSenderResponse setDefault(
            String sender,
            Optional<Options> options) throws Exception {

        if (options.isPresent()) {
          options.get().validate(Arrays.asList(Options.Option.RETRY_CONFIG));
        }
        SetDefaultSenderRequest request =
            SetDefaultSenderRequest
                .builder()
                .sender(sender)
                .build();
        
        String _baseUrl = this.sdkConfiguration.serverUrl;
        String _url = Utils.generateURL(
                SetDefaultSenderRequest.class,
                _baseUrl,
                "/senders/{sender}",
                request, null);
        
        HTTPRequest _req = new HTTPRequest(_url, "PATCH");
        _req.addHeader("Accept", "application/json;q=1, application/problem+json;q=0")
            .addHeader("user-agent", 
                SDKConfiguration.USER_AGENT);

        Utils.configureSecurity(_req,  
                this.sdkConfiguration.securitySource.getSecurity());

        HTTPClient _client = this.sdkConfiguration.defaultClient;
        HTTPRequest _finalReq = _req;
        RetryConfig _retryConfig;
        if (options.isPresent() && options.get().retryConfig().isPresent()) {
            _retryConfig = options.get().retryConfig().get();
        } else if (this.sdkConfiguration.retryConfig.isPresent()) {
            _retryConfig = this.sdkConfiguration.retryConfig.get();
        } else {
            _retryConfig = RetryConfig.builder()
                .backoff(BackoffStrategy.builder()
                            .initialInterval(500, TimeUnit.MILLISECONDS)
                            .maxInterval(60000, TimeUnit.MILLISECONDS)
                            .baseFactor((double)(1.5))
                            .maxElapsedTime(3600000, TimeUnit.MILLISECONDS)
                            .retryConnectError(true)
                            .build())
                .build();
        }
        List<String> _statusCodes = new ArrayList<>();
        _statusCodes.add("5XX");
        Retries _retries = Retries.builder()
            .action(() -> {
                HttpRequest _r = null;
                try {
                    _r = sdkConfiguration.hooks()
                        .beforeRequest(
                            new BeforeRequestContextImpl(
                                "setDefaultSender", 
                                Optional.of(List.of()), 
                                sdkConfiguration.securitySource()),
                            _finalReq.build());
                } catch (Exception _e) {
                    throw new NonRetryableException(_e);
                }
                try {
                    return _client.send(_r);
                } catch (Exception _e) {
                    return sdkConfiguration.hooks()
                        .afterError(
                            new AfterErrorContextImpl(
                                "setDefaultSender",
                                 Optional.of(List.of()),
                                 sdkConfiguration.securitySource()), 
                            Optional.empty(),
                            Optional.of(_e));
                }
            })
            .retryConfig(_retryConfig)
            .statusCodes(_statusCodes)
            .build();
        HttpResponse<InputStream> _httpRes = sdkConfiguration.hooks()
                 .afterSuccess(
                     new AfterSuccessContextImpl(
                         "setDefaultSender", 
                         Optional.of(List.of()), 
                         sdkConfiguration.securitySource()),
                     _retries.run());
        String _contentType = _httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        SetDefaultSenderResponse.Builder _resBuilder = 
            SetDefaultSenderResponse
                .builder()
                .contentType(_contentType)
                .statusCode(_httpRes.statusCode())
                .rawResponse(_httpRes);

        SetDefaultSenderResponse _res = _resBuilder.build();
        
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "204")) {
            _res.withHeaders(_httpRes.headers().map());
            // no content 
            return _res;
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "400", "401", "403", "4XX", "5XX")) {
            if (Utils.contentTypeMatches(_contentType, "application/problem+json")) {
                ErrorResponse _out = Utils.mapper().readValue(
                    Utils.toUtf8AndClose(_httpRes.body()),
                    new TypeReference<ErrorResponse>() {});
                throw _out;
            } else {
                throw new SDKError(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "Unexpected content-type received: " + _contentType, 
                    Utils.extractByteArrayFromBody(_httpRes));
            }
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "404")) {
            if (Utils.contentTypeMatches(_contentType, "application/json")) {
                ErrorResponse _out = Utils.mapper().readValue(
                    Utils.toUtf8AndClose(_httpRes.body()),
                    new TypeReference<ErrorResponse>() {});
                throw _out;
            } else {
                throw new SDKError(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "Unexpected content-type received: " + _contentType, 
                    Utils.extractByteArrayFromBody(_httpRes));
            }
        }
        throw new SDKError(
            _httpRes, 
            _httpRes.statusCode(), 
            "Unexpected status code received: " + _httpRes.statusCode(), 
            Utils.extractByteArrayFromBody(_httpRes));
    }

}
