/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */


package pl.gsmservice.gateway.models.operations;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;
import pl.gsmservice.gateway.utils.SpeakeasyMetadata;
import pl.gsmservice.gateway.utils.Utils;

public class GetSubaccountDetailsRequest {

    /**
     * Login of the subaccount (user) to get the data for
     */
    @SpeakeasyMetadata("pathParam:style=simple,explode=true,name=user_login")
    private String userLogin;

    @JsonCreator
    public GetSubaccountDetailsRequest(
            String userLogin) {
        Utils.checkNotNull(userLogin, "userLogin");
        this.userLogin = userLogin;
    }

    /**
     * Login of the subaccount (user) to get the data for
     */
    @JsonIgnore
    public String userLogin() {
        return userLogin;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * Login of the subaccount (user) to get the data for
     */
    public GetSubaccountDetailsRequest withUserLogin(String userLogin) {
        Utils.checkNotNull(userLogin, "userLogin");
        this.userLogin = userLogin;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        GetSubaccountDetailsRequest other = (GetSubaccountDetailsRequest) o;
        return 
            Objects.deepEquals(this.userLogin, other.userLogin);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            userLogin);
    }
    
    @Override
    public String toString() {
        return Utils.toString(GetSubaccountDetailsRequest.class,
                "userLogin", userLogin);
    }
    
    public final static class Builder {
 
        private String userLogin;  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Login of the subaccount (user) to get the data for
         */
        public Builder userLogin(String userLogin) {
            Utils.checkNotNull(userLogin, "userLogin");
            this.userLogin = userLogin;
            return this;
        }
        
        public GetSubaccountDetailsRequest build() {
            return new GetSubaccountDetailsRequest(
                userLogin);
        }
    }
}

