/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package pl.gsmservice.gateway.models.operations;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import java.lang.Override;
import java.lang.String;
import pl.gsmservice.gateway.utils.SpeakeasyMetadata;
import pl.gsmservice.gateway.utils.Utils;


public class DeleteSenderRequest {
    /**
     * Sender name to be removed
     */
    @SpeakeasyMetadata("pathParam:style=simple,explode=false,name=sender")
    private String sender;

    @JsonCreator
    public DeleteSenderRequest(
            String sender) {
        Utils.checkNotNull(sender, "sender");
        this.sender = sender;
    }

    /**
     * Sender name to be removed
     */
    @JsonIgnore
    public String sender() {
        return sender;
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * Sender name to be removed
     */
    public DeleteSenderRequest withSender(String sender) {
        Utils.checkNotNull(sender, "sender");
        this.sender = sender;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        DeleteSenderRequest other = (DeleteSenderRequest) o;
        return 
            Utils.enhancedDeepEquals(this.sender, other.sender);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            sender);
    }
    
    @Override
    public String toString() {
        return Utils.toString(DeleteSenderRequest.class,
                "sender", sender);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private String sender;

        private Builder() {
          // force use of static builder() method
        }


        /**
         * Sender name to be removed
         */
        public Builder sender(String sender) {
            Utils.checkNotNull(sender, "sender");
            this.sender = sender;
            return this;
        }

        public DeleteSenderRequest build() {

            return new DeleteSenderRequest(
                sender);
        }

    }
}
