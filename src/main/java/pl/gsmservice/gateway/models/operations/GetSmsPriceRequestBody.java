/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */


package pl.gsmservice.gateway.models.operations;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.List;
import java.util.Objects;
import pl.gsmservice.gateway.models.components.SmsMessage;
import pl.gsmservice.gateway.utils.OneOfDeserializer;
import pl.gsmservice.gateway.utils.TypedObject;
import pl.gsmservice.gateway.utils.Utils.JsonShape;
import pl.gsmservice.gateway.utils.Utils.TypeReferenceWithShape;
import pl.gsmservice.gateway.utils.Utils;
/**
 * GetSmsPriceRequestBody - To check the price of a single message or messages with the same content to multiple recipients, pass a single <code>SmsMessage</code> object with the properties of this message using <code>GetSmsPriceRequestBody.of(SmsMessage)</code> method. To check the price of multiple messages with different content at the same time, pass a <code>List&lt;SmsMessage&gt;</code> with the properties of each message using <code>GetSmsPriceRequestBody.of(List.of(SmsMessage,...))</code> method.
 */

@JsonDeserialize(using = GetSmsPriceRequestBody._Deserializer.class)
public class GetSmsPriceRequestBody {

    @JsonValue
    private TypedObject value;
    
    private GetSmsPriceRequestBody(TypedObject value) {
        this.value = value;
    }

    public static GetSmsPriceRequestBody of(SmsMessage value) {
        Utils.checkNotNull(value, "value");
        return new GetSmsPriceRequestBody(TypedObject.of(value, JsonShape.DEFAULT, new TypeReference<SmsMessage>(){}));
    }

    public static GetSmsPriceRequestBody of(List<SmsMessage> value) {
        Utils.checkNotNull(value, "value");
        return new GetSmsPriceRequestBody(TypedObject.of(value, JsonShape.DEFAULT, new TypeReference<List<SmsMessage>>(){}));
    }
    
    /**
     * Returns an instance of one of these types:
     * <ul>
     * <li>{@code pl.gsmservice.gateway.models.components.SmsMessage}</li>
     * <li>{@code java.util.List<pl.gsmservice.gateway.models.components.SmsMessage>}</li>
     * </ul>
     * 
     * <p>Use {@code instanceof} to determine what type is returned. For example:
     * 
     * <pre>
     * if (obj.value() instanceof String) {
     *     String answer = (String) obj.value();
     *     System.out.println("answer=" + answer);
     * }
     * </pre>
     * 
     * @return value of oneOf type
     **/ 
    public java.lang.Object value() {
        return value.value();
    }    
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        GetSmsPriceRequestBody other = (GetSmsPriceRequestBody) o;
        return Objects.deepEquals(this.value.value(), other.value.value()); 
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(value.value());
    }
    
    @SuppressWarnings("serial")
    public static final class _Deserializer extends OneOfDeserializer<GetSmsPriceRequestBody> {

        public _Deserializer() {
            super(GetSmsPriceRequestBody.class, false,
                  TypeReferenceWithShape.of(new TypeReference<List<SmsMessage>>() {}, JsonShape.DEFAULT),
                  TypeReferenceWithShape.of(new TypeReference<SmsMessage>() {}, JsonShape.DEFAULT));
        }
    }
    
    @Override
    public String toString() {
        return Utils.toString(GetSmsPriceRequestBody.class,
                "value", value);
    }
 
}
